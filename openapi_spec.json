{
  "openapi": "3.1.0",
  "info": {
    "title": "Junior API",
    "description": "API for managing user profiles, payments, resumes, and generating comments.",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Register User",
        "description": "Handles new user registration.\nCreates user, attempts Stripe customer creation, seeds initial user prompts.\nApplies rate limiting.",
        "operationId": "register_user_api_users_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/token": {
      "post": {
        "tags": ["Users"],
        "summary": "Login For Access Token",
        "description": "Handles user login, generates Access and Refresh JWT tokens.\nApplies rate limiting.",
        "operationId": "login_for_access_token_api_users_token_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/token/refresh": {
      "post": {
        "tags": ["Users"],
        "summary": "Refresh Access Token",
        "description": "Takes a refresh token and returns a new pair of access and refresh tokens.\nApplies rate limiting.",
        "operationId": "refresh_access_token_api_users_token_refresh_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RefreshTokenRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Token" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Read Users Me",
        "description": "Fetches details for the currently authenticated user.",
        "operationId": "read_users_me_api_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/users/bio": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Bio",
        "description": "Get the user's bio.",
        "operationId": "get_bio_api_users_bio_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BioUpdate" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update Bio",
        "description": "Update the user's bio.",
        "operationId": "update_bio_api_users_bio_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BioUpdate" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/profile/": {
      "get": {
        "tags": ["Professional Profile"],
        "summary": "Get Profile",
        "description": "Retrieves the professional profile for the currently authenticated user.",
        "operationId": "get_profile_api_profile__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProfileResponse" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      },
      "post": {
        "tags": ["Professional Profile"],
        "summary": "Create Or Update Profile",
        "description": "Creates or updates the professional profile for the currently authenticated user.",
        "operationId": "create_or_update_profile_api_profile__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProfileCreate" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ProfileResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/payments/create-customer": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create Stripe Customer",
        "description": "Creates a Stripe Customer object if one doesn't exist for the user.",
        "operationId": "create_stripe_customer_api_payments_create_customer_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/payments/create-subscription": {
      "post": {
        "tags": ["Payments"],
        "summary": "Create Subscription",
        "description": "Creates a Stripe subscription for the user.",
        "operationId": "create_subscription_api_payments_create_subscription_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/resumes/upload": {
      "post": {
        "tags": ["Resumes"],
        "summary": "Upload Resume",
        "operationId": "upload_resume_api_resumes_upload_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_resume_api_resumes_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ResumeResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/resumes/list": {
      "get": {
        "tags": ["Resumes"],
        "summary": "List Resumes",
        "description": "Lists all resumes for the current user.",
        "operationId": "list_resumes_api_resumes_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/ResumeResponse" },
                  "type": "array",
                  "title": "Response List Resumes Api Resumes List Get"
                }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/resumes/download/{resume_id}": {
      "get": {
        "tags": ["Resumes"],
        "summary": "Download Resume",
        "description": "Generates a presigned URL or path to download a specific resume.",
        "operationId": "download_resume_api_resumes_download__resume_id__get",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "resume_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Resume Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DownloadUrlResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/resumes/{resume_id}": {
      "delete": {
        "tags": ["Resumes"],
        "summary": "Delete Resume",
        "description": "Deletes a specific resume from storage and the database.",
        "operationId": "delete_resume_api_resumes__resume_id__delete",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "resume_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Resume Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/comments/generate": {
      "post": {
        "tags": ["Comments"],
        "summary": "Generate Comment",
        "description": "Generates a LinkedIn comment using prompts from DB, requires active subscription.",
        "operationId": "generate_comment_api_comments_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CommentResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "OAuth2PasswordBearer": [] }]
      }
    },
    "/api/health": {
      "get": {
        "tags": ["Health", "Health"],
        "summary": "Health Check",
        "description": "Performs a basic health check, including database connectivity.",
        "operationId": "health_check_api_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          }
        }
      }
    },
    "/api/prompts/": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Create User Prompt",
        "description": "Creates a new prompt owned by the current user.",
        "operationId": "create_user_prompt_api_prompts__post",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Prompts"],
        "summary": "List User Prompts",
        "description": "Lists prompts owned by the current user, optionally filtered by type and scope.",
        "operationId": "list_user_prompts_api_prompts__get",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prompt_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Prompt Type"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Scope"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PromptResponse" },
                  "title": "Response List User Prompts Api Prompts  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/api/prompts/{prompt_id}": {
      "get": {
        "tags": ["Prompts"],
        "summary": "Get User Prompt",
        "description": "Gets a specific prompt owned by the current user.",
        "operationId": "get_user_prompt_api_prompts__prompt_id__get",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Prompt Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Prompts"],
        "summary": "Update User Prompt",
        "description": "Updates a specific prompt owned by the current user.",
        "operationId": "update_user_prompt_api_prompts__prompt_id__put",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Prompt Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Prompts"],
        "summary": "Delete User Prompt",
        "description": "Deletes a specific prompt owned by the current user.",
        "operationId": "delete_user_prompt_api_prompts__prompt_id__delete",
        "security": [{ "OAuth2PasswordBearer": [] }],
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "Prompt Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BioUpdate": {
        "properties": { "bio": { "type": "string", "title": "Bio" } },
        "type": "object",
        "required": ["bio"],
        "title": "BioUpdate"
      },
      "Body_upload_resume_api_resumes_upload_post": {
        "properties": {
          "file": { "type": "string", "format": "binary", "title": "File" }
        },
        "type": "object",
        "required": ["file"],
        "title": "Body_upload_resume_api_resumes_upload_post"
      },
      "CommentRequest": {
        "properties": {
          "post_text": { "type": "string", "title": "Post Text" },
          "source_linkedin_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Source Linkedin Url"
          },
          "comment_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Comment Date"
          }
        },
        "type": "object",
        "required": ["post_text"],
        "title": "CommentRequest"
      },
      "CommentResponse": {
        "properties": {
          "comment": { "type": "string", "title": "Comment" },
          "verified": { "type": "boolean", "title": "Verified" },
          "edited": { "type": "boolean", "title": "Edited", "default": false },
          "failure_reason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Failure Reason"
          },
          "content_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Content Id"
          },
          "comment_date": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Comment Date"
          }
        },
        "type": "object",
        "required": ["comment", "verified"],
        "title": "CommentResponse"
      },
      "CreateSubscriptionRequest": {
        "properties": { "price_id": { "type": "string", "title": "Price Id" } },
        "type": "object",
        "required": ["price_id"],
        "title": "CreateSubscriptionRequest"
      },
      "DownloadUrlResponse": {
        "properties": {
          "download_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Download Url"
          }
        },
        "type": "object",
        "required": ["download_url"],
        "title": "DownloadUrlResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ProfileCreate": {
        "properties": {
          "profile_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Profile Url"
          }
        },
        "type": "object",
        "required": ["profile_url"],
        "title": "ProfileCreate",
        "description": "Schema for creating/updating a professional profile."
      },
      "ProfileResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "profile_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              { "type": "null" }
            ],
            "title": "Profile Url"
          },
          "is_verified": { "type": "boolean", "title": "Is Verified" },
          "last_used": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used"
          }
        },
        "type": "object",
        "required": ["id", "profile_url", "is_verified", "last_used"],
        "title": "ProfileResponse",
        "description": "Schema for returning professional profile data."
      },
      "PromptCreate": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "prompt_type": { "type": "string", "title": "Prompt Type" },
          "scope": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Scope"
          },
          "text": { "type": "string", "title": "Text" },
          "is_user_default": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is User Default",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "prompt_type", "text"],
        "title": "PromptCreate"
      },
      "PromptResponse": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "prompt_type": { "type": "string", "title": "Prompt Type" },
          "scope": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Scope"
          },
          "text": { "type": "string", "title": "Text" },
          "is_user_default": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is User Default",
            "default": false
          },
          "id": { "type": "integer", "title": "Id" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "prompt_type",
          "text",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "PromptResponse"
      },
      "PromptUpdate": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "prompt_type": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Prompt Type"
          },
          "scope": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Scope"
          },
          "text": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Text"
          },
          "is_user_default": {
            "anyOf": [{ "type": "boolean" }, { "type": "null" }],
            "title": "Is User Default"
          }
        },
        "type": "object",
        "title": "PromptUpdate"
      },
      "RefreshTokenRequest": {
        "properties": {
          "refresh_token": { "type": "string", "title": "Refresh Token" }
        },
        "type": "object",
        "required": ["refresh_token"],
        "title": "RefreshTokenRequest"
      },
      "ResumeResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "file_name": { "type": "string", "title": "File Name" },
          "file_type": { "type": "string", "title": "File Type" },
          "file_size": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "File Size"
          },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "storage_key": { "type": "string", "title": "Storage Key" }
        },
        "type": "object",
        "required": [
          "id",
          "file_name",
          "file_type",
          "is_active",
          "created_at",
          "storage_key"
        ],
        "title": "ResumeResponse"
      },
      "SubscriptionResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "stripe_customer_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripe Customer Id"
          },
          "stripe_subscription_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripe Subscription Id"
          },
          "plan": { "type": "string", "title": "Plan" },
          "status": { "type": "string", "title": "Status" },
          "current_period_start": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Current Period Start"
          },
          "current_period_end": {
            "anyOf": [
              { "type": "string", "format": "date-time" },
              { "type": "null" }
            ],
            "title": "Current Period End"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "title": "Cancel At Period End"
          },
          "client_secret": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "id",
          "stripe_customer_id",
          "stripe_subscription_id",
          "plan",
          "status",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end"
        ],
        "title": "SubscriptionResponse"
      },
      "Token": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": { "type": "string", "title": "Token Type" }
        },
        "type": "object",
        "required": ["access_token", "refresh_token", "token_type"],
        "title": "Token"
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "password": { "type": "string", "title": "Password" }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "UserCreate"
      },
      "UserResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "email": { "type": "string", "format": "email", "title": "Email" },
          "is_active": { "type": "boolean", "title": "Is Active" },
          "stripe_customer_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stripe Customer Id"
          }
        },
        "type": "object",
        "required": ["id", "email", "is_active"],
        "title": "UserResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": { "scopes": {}, "tokenUrl": "/api/users/token" }
        }
      }
    }
  }
}
